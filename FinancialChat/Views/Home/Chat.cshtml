@using FinancialChat.Models
@using Microsoft.AspNet.Identity
@model FinancialChat.ViewModels.ChatRoomViewModel
@{
    ViewBag.Title = "Chat";
}

<h2>Chat Room: @Model.Name</h2>
<div class="container">
    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-6 form-inline">
                <input type="text" id="message" class="form-control"/>
                <button type="button" id="sendmessage" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>

    <input type="hidden" id="userid" value="@User.Identity.GetUserId()"/>
    <input type="hidden" id="displayname" value="@(new ApplicationDbContext().Users.Find(User.Identity.GetUserId()).FullName)"/>
    <input type="hidden" id="chatroomid" value="@Model.Id"/>
    <input type="hidden" id="chatroomname" value="@Model.Name"/>
    <ul id="discussion"></ul>
</div>

@section scripts
{
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(document).ready(function () {
            // Read enter key on message text box
            $('#message').keypress(function (e) {
                if (e.keyCode === 13) {
                    $('#sendmessage').click();
                }
            });
        });
        // Reference the auto-generated proxy for the hub.  
        var chat = $.connection.chatHub;
        $(function () {
            
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (time, name, message) {
                // Limit to 50 Messages
                if ($('#discussion li').length >= 50) {
                    $('#discussion li').first().remove();
                }
                // Add the message to the page. 
                $('#discussion').append('<li>(' + htmlEncode(time) + ') <strong>' + htmlEncode(name) + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Set initial focus to message input box.  
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Avoid to send empty messages
                    if ($('#message').val().localeCompare('') !== 0) {
                        var messageModel = {
                            userid: $('#userid').val(),
                            username: $('#displayname').val(),
                            roomid: $('#chatroomid').val(),
                            roomname: $('#chatroomname').val(),
                            message: $('#message').val()
                        }
                        // Call the Send method on the hub. 
                        //chat.server.send($('#displayname').val(), $('#message').val(), $('#chatroomname').val());
                        chat.server.send(messageModel);
                    }
                    // Clear text box and reset focus for next comment. 
                    $('#message').val('').focus();
                });
                // Join Chat Room
                chat.server.joinRoom($('#chatroomname').val(), $('#displayname').val());
            });

        });
        window.onbeforeunload = function(event) {
            chat.server.leaveRoom($('#chatroomname').val(), $('#displayname').val());
        }
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}
